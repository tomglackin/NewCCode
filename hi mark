
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <stdbool.h>


int population[27][27]; // Defining the 27x27 Base Matrix which contains the 25x25 population and the border
double Analysis[50][2];
//Set up constants to hold each of the possible patient status
//This allows us to make readable references to these status in the code
const int vulnerable = 0;
const int infected = 1;
const int immune = 8;

//Forward declare the two functions we will use to
//infect and spread the infection
bool Infect(int x, int y);
bool Spread(int x, int y);





int main(void)
{


	setvbuf(stdout, NULL, _IONBF, 0);
	setvbuf(stderr, NULL, _IONBF, 0);


	FILE * Immu;
	Immu= fopen("Immu.xls","w");



	srand(time(0)); //allows for the random arrays to be produced for each separate simulation
	int SIM;


	// fraction of population immune
	double probIM; // probability that a member of the population is Immune
	double FractImmune, FractInfected, FractVul; // Fractions to be exported
	double PopSize, ImmuneTotal; // defining the size of the population

	probIM = 0.46136;
	PopSize = 625.0;
	ImmuneTotal = ceil((probIM) * (PopSize)); //when dictated by student number value = 289

	//ImmuneTotal = ANY NUMBER REQUIRED
	printf("probIM:%g\nImmuneTotal:%g\n\n\n", probIM, ImmuneTotal);



	for (SIM = 0; SIM < 50; SIM++) // for loop which will produce 50 Simulations of the Spread
	{



int i, j, num; // terms used for defining the matrix and random location generation
int K,L,counterK,counterL; //used for analysing array
int na, nb, nc; // terms used within various loops within the simulation
int counter1, counter8, counter0; // terms used for counting the amount of Infected:1,Immune:8,Vulnerable:0




		//setting up frame work for spread; 27x27 matrix with outer edges set as immune "8"
		for (i = 0; i < 27; i++)
		{
			for (j = 0; j < 27; j++)
			{

				population[i][j] = immune ;

			}
		}





		//setting up 25X25 matrix, P[i][j], of random elements 0, which can be considered as vulnerable, spans from array coord 1-26
		for (i = 1; i < 26; i++)
		{
			for (j = 1; j < 26; j++)
			{

				num = rand() % 1;
				population[i][j] = num;

			}
		}






						// selecting 289 immune cells
						for (na = 0; na < ImmuneTotal; na++)
						{

							int x;
							int y;

							x = (rand() % 26);
							y = (rand() % 26);

							if (x ==0)
							{
								x++;
							}

							if (y == 0)
							{
								y++;
							}

							// Only set element to immune if it has not been set before
							if (population[x][y] != immune )
							{
								population[x][y] = immune;
							}
							else //if element has already been set to immune, then we need to set our loop counter back 1 to retry for a new position
							{
								na--;
							}
						}




										//The following code will allow us to randomly
										//select our patient zero
										int patientZeroX;
										int patientZeroY;

										patientZeroX = rand() % 26;
										patientZeroY = rand() % 26;
										// %26 allows up to i,j=26 so we need to ensure i,j=0 isn't included.

										//Make sure the patient isn't in row or column 0
										if (patientZeroX == 0)
										{
											patientZeroX++;
										}

										if (patientZeroY == 0)
										{
											patientZeroY++;
										}


										//In order to start off the infection we force our
										//patient zero to be vulnerable
										population[patientZeroX][patientZeroY] = vulnerable;




										//Now we start the infection and allow it
										//to naturally spread
										Infect(patientZeroX, patientZeroY);






													//extracting the counting values from array
													counter1 = 0; //infected counter
													counter8 = 0; //immunity counter
													counter0 = 0; //vulnerable counter

													for (i = 1; i < 26; i++)
													{
														for (j = 1; j < 26; j++)
														{

															if (population[i][j] == infected )  // this 'infect' allows for the recursion to occur via boolean of infect and spread
																counter1++;

														}
													}

													for (i = 1; i < 26; i++)
													{
														for (j = 1; j < 26; j++)
														{

															if (population[i][j] == immune)
																counter8++;

														}
													}

													for (i = 1; i < 26; i++)
													{
														for (j = 1; j < 26; j++)
														{

															if (population[i][j] == vulnerable )
																counter0++;

														}
													}


													FractInfected = (counter1 / 625.0); // Percentage of Population Infected
													FractImmune = (counter8 / 625.0); // Percentage Immune
													FractVul = (counter0 / 625.0); // Percentage Vulnerable






//general for-loop to print the inner 25X25 matrix
/*
for (i = 1; i < 26; i++)
	{
		for (j = 1; j < 26; j++)
			{
				printf("%d \t ", population[i][j]);
				if (j == 25)
			{
		printf("\n");
	}


	}
}

*/
//printing of information/data for the spread of disease

//printf("Number of People Infected:%d\nNumber of People Immune:%d\nNumber of People Vulnerable:%d\n" , counter1, counter8, counter0) ;
//printf("Percentage Infected:%g\nPercentage Immune:%g\nPercentage Vulnerable:%g\n\n\n", PerInfected, PerImmune, PerVul);
//fprintf(Immunization,"Percentage Infected\t%g\tPercentage Immune\t%g\tPercentage Vulnerable\t%g\t\n",PerInfected, PerImmune, PerVul);
//printf("Number of People Immune:%d\n", counter8);
//printf("Number of People Infected:%d\n", counter1);
//printf("Number of People Vulnerable:%d\n", counter0);
//printf("Fraction Immune:%g\nFraction Infected:%g\nFraction Vulnerable:%g\n\n",FractImmune,FractInfected,FractVul);
fprintf(Immu,"Number Immune\t%d\tNumber Infected\t%d\tNumber Vulnerable\t%d\t\t\tFraction Immune\t%g\tFraction Infected\t%g\tFraction Vulnerable\t%g\n",counter8,counter1,counter0,FractImmune,FractInfected,FractVul);

Analysis[SIM][0]=FractInfected;
Analysis[SIM][1]=FractVul;

	}



//ANALYSIS


		//MEAN
		double SumForFractInfected=0,SumForFractVul=0;
		double MeanFractInfected,MeanFractVul;

		for (SIM = 0; SIM < 50; SIM++)
		{
			SumForFractInfected=SumForFractInfected+Analysis[SIM][0];
			SumForFractVul=SumForFractVul+Analysis[SIM][1];
		}

		MeanFractInfected=(SumForFractInfected/50);
		MeanFractVul=(SumForFractVul/50);

		printf("Mean Fraction Infected:%g\nMean Fraction Vulnerable:%g\n\n", MeanFractInfected,MeanFractVul);


				//Variance
				double VARSumForFractInfected=0, VARSumForFractVul=0;
				double VarFractInfected,VarFractVul;

				for (SIM = 0; SIM < 50; SIM++)
				{
					VARSumForFractInfected = VARSumForFractInfected + pow((Analysis[SIM][0] - MeanFractInfected),2);
					VARSumForFractVul = VARSumForFractVul + pow((Analysis[SIM][1] - MeanFractVul),2);
				}

				VarFractInfected=(VARSumForFractInfected/50);
				VarFractVul=(VARSumForFractVul/50);

				printf("Variance in Fraction Infected:%g\nVarience in Fraction Vulnerable:%g\n\n", VarFractInfected, VarFractVul);


						//Standard Deviation

						double SD_FractInfected, SD_FractVul;

						SD_FractInfected = sqrt(VarFractInfected);
						SD_FractVul = sqrt(VarFractVul);

						printf("Standard Deviation in Fraction Infected:%g\nStandard Deviation in Fraction Vulnerable:%g\n",SD_FractInfected, SD_FractVul);

return EXIT_SUCCESS;
}



//The Spread and Infect functions call each other recursively

//This method attempts to spread the infection in a natural manner i.e. by infecting those vulnerable patients in direct contact/surrounding array elements
//as
	bool Spread(int x, int y)
	{
	bool retVal = false;
	Infect(x - 1, y);
	Infect(x + 1, y);
	Infect(x, y-1);
	Infect(x, y+1);

	return 0;
	}

//This function will infect the current array element/patient only if they are vulnerable
	bool retVal = false;
	bool Infect(int x, int y)
	{
		if (population[y][x] == vulnerable)
			{
				population[y][x] = infected;
				//Each time a patient is infected then the infection tries to spread
				Spread(x,y);
				retVal = true;
			}

		else
			{
			retVal = false;
			}

		return retVal;
	}
